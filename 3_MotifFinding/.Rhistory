}
plot(seq(0,100),rev(mses.lasso.train)[1:101],type="l",col='red',xlab="Lambda",ylab="MSE on training data")
points(seq(0,100),rev(mses.ridge.train)[1:101],type="l",col='blue')
points(seq(0,100),rev(mses.EN.train)[1:101],type='l',col='purple')
legend(0,4.8,legend=c("Ridge","LASSO","Elastic Net"),col=c('blue','red','purple'),lty=1,bty="n")
plot(seq(0,1000),rev(mses.lasso.test),type="l",col='red',xlab="Lambda",ylab="MSE on test data",xlim=c(0,1000),ylim=c(4,5.2))
points(seq(0,1000),rev(mses.ridge.test),type="l",col='blue')
points(seq(0,1000),rev(mses.EN.test),type='l',col='purple')
legend(800,4.2,legend=c("Ridge","LASSO","Elastic Net"),col=c('blue','red','purple'),lty=1,bty="n")
optimalbetahats.lasso = lassomodel$beta[,which(mses.lasso.test==min(mses.lasso.test))]
optimalbetahats.ridge = ridgemodel$beta[,which(mses.ridge.test==min(mses.ridge.test))]
optimalbetahats.EN = ENmodel$beta[,which(mses.EN.test==min(mses.EN.test))]
plot(beta,optimalbetahats.lasso,col='red',pch=16)
points(beta,optimalbetahats.ridge,col='blue',pch=16)
points(beta,optimalbetahats.EN,col='purple',pch=16)
legend(-0.4,0.4,legend=c("Ridge","LASSO","Elastic Net"),col=c('blue','red','purple'),pch=16)
abline(a=0,b=1,col='gray')
betadifs = cbind(optimalbetahats.lasso-beta,optimalbetahats.ridge-beta,optimalbetahats.EN-beta)
barplot(t(betadifs),beside=T,col=c('red','blue','purple'),ylim=c(-0.41,0.41),ylab="Betahat - Beta",names=seq(1,10),xlab = "beta index",legend=TRUE,legend=c("LASSO","Ridge","Elastic Net"))
betadifs = cbind(optimalbetahats.lasso-beta,optimalbetahats.ridge-beta,optimalbetahats.EN-beta)
barplot(t(betadifs),beside=T,col=c('red','blue','purple'),ylim=c(-0.41,0.41),ylab="Betahat - Beta",names=seq(1,10),xlab = "beta index",legend=c("LASSO","Ridge","Elastic Net"))
plot(c(0:m),ridgebias[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat bias",ylim=c(-0.5,0.5))
text(m,ridgebias[,m+1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgebias[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
m=300
lambda = c(0:m)
sigmahat = sqrt(sum((ysim.train-mean(ysim.train))**2)/100-1) #estimate sigma from MSE of training data
#bias (equation from lecture notes)
ridgebias = matrix(0,nrow=10,ncol=m+1)
for(l in lambda){
ridgebias[,l+1]=solve(t(X.train)%*%X.train + l*diag(10))%*%t(X.train)%*%X.train%*%beta - beta
}
#variance (equation from lecture notes)
ridgevars = matrix(0,nrow=10,ncol=m+1)
for(l in lambda){
term1 = t(X.train)%*%X.train
term2 = solve(term1 + l*diag(10))
variances = (sigmahat**2)*term2%*%term1%*%term2
ridgevars[,l+1]=diag(variances) #the diagonal elements of the covariance matrix are the variances
}
ridgemse = ridgebias**2 + ridgevars   #mse = bias^2+variance (from lecture notes)
#plot lambda vs bias for each betahat
plot(c(0:m),ridgebias[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat bias",ylim=c(-0.5,0.5))
text(m,ridgebias[,m+1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgebias[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
#plot lambda vs variance for each betahat
plot(c(0:m),ridgevars[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat variance",ylim=c(0,0.5))
text(0,ridgevars[,1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgevars[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
#plot lambda vs variance for each betahat
plot(c(0:m),ridgevars[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat variance",ylim=c(0,0.11))
text(0,ridgevars[,1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgevars[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
plot(c(0:m),ridgebias[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat bias",ylim=c(-0.5,0.5))
text(m,ridgebias[,m+1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgebias[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
plot(c(0:m),ridgevars[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat variance",ylim=c(0,0.11))
text(0,ridgevars[,1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgevars[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
plot(c(0:m),ridgemse[1,],type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat MSE",ylim=c(0,0.11))
text(m,ridgemse[,m+1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:m),ridgemse[i,],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
plot(c(0:100),rev(betahatvars[1,]),type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat variance",ylim=c(0,0.1))
text(0,betahatvars[,101],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:100),rev(betahatvars[i,])[1:101],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
#3e
#empirical bias: do lots of sims, take mean of betahats
#to simulate E[B|X] as in ridge, redraw y's but not x's
#compute MSE as sum of bias**2 and variance
#create a function to compute and return betahats
lassorun = function(i=1){
set.seed(i)
ysim.train.run =  mvrnorm(n=1, mu=ymu.train, Sigma=diag(100)*4)
lassomodel.run = glmnet(X.train,ysim.train.run,family="gaussian",alpha=1,lambda=seq(100,0)/(2*100),intercept=FALSE) #give lambdas in decreasing order per glmnet instructions
return(as.matrix(lassomodel.run$beta))
}
#call this function 1000 times using sapply for speed and store results in an array
j=1000
betarray = sapply(seq(1,j),lassorun,simplify="array")
#take means of betas over all iterations to estimate expected values
betahatmeans = apply(betarray,c(1,2),mean)
betahatbias = betahatmeans-beta
betahatvars = apply(betarray,c(1,2),var)
betahatmse = betahatbias**2 + betahatvars #MSE = bias^2 + variance
#plot lambda vs variance for each betahat
plot(c(0:100),rev(betahatvars[1,]),type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat variance",ylim=c(0,0.1))
text(0,betahatvars[,101],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:100),rev(betahatvars[i,])[1:101],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
plot(c(0:100),rev(betahatbias[1,]),type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat bias",ylim=c(-0.3,0.3))
text(100,betahatbias[,1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:100),rev(betahatbias[i,])[1:101],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
plot(c(0:100),rev(betahatmse[1,]),type="l",col=plot_rainbow[1],xlab="Lambda",ylab="Betahat MSE",ylim=c(0,0.11))
text(100,betahatmse[,1],labels=seq(1,10),col=plot_rainbow)
for(i in c(2:10)){
lines(c(0:100),rev(betahatmse[i,])[1:101],type="l",ylim=c(-1,1),col=plot_rainbow[i])
}
data = read.table(/Users/Nick/Documents/workspace/PRDM9/FragLengthDist.240.q20.tbl)
data = read.table("/Users/Nick/Documents/workspace/PRDM9/FragLengthDist.240.q20.tbl")
barplot(data)
dim(data)
data[1:10,]
plot(data[,1],data[,2])
plot(data[,1],data[,2],lty=1,type='l')
plot(data[,1],data[,2],lty=1,type='l',xlim=c(0,2000))
plot(data[,1],data[,2],lty=1,type='l',xlim=c(0,1000))
curve(pbeta(x,6.45,4.89))
curve(dbeta(x,6.45,4.89))
curve(dbeta(x,6.45,4.89e5))
curve(dbeta(x,6.45,4.89e05))
curve(dbeta(x,6.45,4.89e05),ylim=c(0,0.001))
curve(dbeta(x,6.45,4.89e5),ylim=c(0,0.001))
curve(dbeta(x,6.45,489000),ylim=c(0,0.001))
curve(dbeta(x,6.45,489000))
curve(dbeta(x,6.45,1000),ylim=c(0,0.001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.000000001),ylim=c(0,0.001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.000000001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.00000001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.000001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.0001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.00001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.0001))
curve(dbeta(x,6.45,489000),xlim=c(0,0.0004))
curve(dbeta(x,6.45,489000),xlim=c(0,0.00004))
curve(dbeta(10000x,6.45,489000),xlim=c(0,0.00004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.00004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.0004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.000000001))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.00000004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.000004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.00004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.00000004))
curve(dbeta(10000*x,6.45,489000),xlim=c(0,0.000000004))
curve(dbeta(x/10000,6.45,489000),xlim=c(0,0.000000004))
curve(dbeta(x/10000,6.45,489000),xlim=c(0,0.000004))
curve(dbeta(x/10000,6.45,489000),xlim=c(0,0.004))
curve(dbeta(x/10000,6.45,489000),xlim=c(0,0.4))
curve(dbeta(x/1000000,6.45,489000),xlim=c(0,0.4))
curve(dbeta(x/1000000,6.45,489000),xlim=c(0,40))
curve(dbeta(x/700,6.45,489000),xlim=c(0,40))
curve(dbeta(x/700,6.45,489000),xlim=c(0,0.00004))
curve(dbeta(x/700,6.45,489000),xlim=c(0,0.0004))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,0.0004))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,0.000004))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,0.04))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,4))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,40))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,4000))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,1000))
curve(dbeta(x/700,3.887,8.635),xlim=c(0,1000),add=TRUE)
data=read.table("/Users/Nick/Desktop/LabNotebook/StreetsLab/scDamID/UTinput.201.FragSizeDist.txt",header=F)
plot(data[,1],data[,2])
plot(data[,1],data[,2],xlim=c(0,1000))
plot(data[,1],data[,2],xlim=c(0,500))
plot(data[,1],data[,2],xlim=c(0,500),type='l')
plot(log(data[,1]),data[,2],xlim=c(0,500),type='l')
plot(log(data[,1]),data[,2],xlim=c(0,30),type='l')
plot(log(data[,1]),data[,2],xlim=c(0,7),type='l')
plot(data[,1],data[,2],xlim=c(0,500),type='l')
plot(data[,1],data[,2],xlim=c(0,1000),type='l')
which.max(data[,2])
data = read.table("/Users/Nick/Dropbox/PRDM9_binding_and_work/FinalPeakFiles/GEO/ChIPseq_Peaks.HumanPRDM9_HAV5.antiHAV5.protocolC.p10e-5.sep250.txt",header=TRUE)
names(data)
datafilt = subset(data,cov_input>=5 & cov_input<quantile(data$cov_input,0.9) & pvalue<1e-10 & enrichment>10)
dim(datafilt)
datafilt = subset(data,cov_input>=5 & cov_input<quantile(data$cov_input,0.9) & pvalue<1e-10 & enrichment>100)
dim(datafilt)
datafilt = subset(data,cov_input>=5 & cov_input<quantile(data$cov_input,0.9) & pvalue<1e-10 & enrichment>15)
dim(datafilt)
datafilt = subset(data,cov_input>=5 & cov_input<quantile(data$cov_input,0.9) & pvalue<1e-10 & enrichment>20)
dim(datafilt)
datafilt = subset(data,cov_input>=5 & cov_input<quantile(data$cov_input,0.9) & pvalue<1e-10 & enrichment>30)
dim(datafilt)
datafilt
data = read.table("/Users/Nick/Desktop/LabNotebook/hekchip/1_CallPeaks/ConfPosonly.FinalPeakRegions.HumanPRDM9.q1.p0.000001.sep250.withseqs.promoterflagged.dnaseflagged.withgc.bed",header=TRUE)
names(data)
upper()
uc()
uc('abcd')
upper('abcd')
stringupper('abcd')
string.upper('abcd')
string.uc('abcd')
datafilt = subset(data,covg>=5 & covg<quantile(data$covg,0.9) & pval<1e-10 & enrich>30 & seq ==toupper(seq))
dim(datafilt)
datafilt = subset(data,covg>=5 & covg<quantile(data$covg,0.9) & pval<1e-10 & enrich>20 & seq ==toupper(seq))
dim(datafilt)
datafilt
write.table(datafilt,"/Users/Nick/Desktop/TopPeaks.txt",quote=F,sep="\t")
quantile(data$covg,0.9)
setwd("/Users/Nick/Dropbox/HEK_Paper_Code/3_MotifFinding/")
load("Chimp_Motif_Results_Final_iter65.r")
ls
ls()
rm(list=ls())
load("Chimp_Motif_Results_Final_iter65.r")
ls()
A=matrix(c(1,2,2,4),nrow=2,ncol=2)
A
eigen(A,TRUE,TRUE)
eigen(A,TRUE)
A=matrix(c(3,2,-1,0),nrow=2,ncol=2)
eigen(A,TRUE)
A=matrix(c(2,11,0,2),nrow=2,ncol=2)
eigen(A,TRUE)
A
A=matrix(c(2,0,11,2),nrow=2,ncol=2)
A
eigen(A,TRUE)
A=matrix(c(3,2,-1,0),nrow=2,ncol=2)
A
A=matrix(c(3,-1,2,0),nrow=2,ncol=2)
A
eigen(A,TRUE)
A
eigen(A,TRUE)
eigen(t(A),TRUE)
A=matrix(c(1,2,0,0,2,4,0,0,0,0,3,2,0,0,-1,0),nrow=4,ncol=4)
eigen(A)
A
A=matrix(c(3,-1,2,0),nrow=2,ncol=2)
A
eigen(A)
A=matrix(c(2,0,11,2),nrow=2,ncol=2)
eigen(A)
jordan(A)
T=eigen(A)$vectors
solve(T)
T=matrix(c(1,0,-1,0),nrow=2,ncol=2)
solve(T)
